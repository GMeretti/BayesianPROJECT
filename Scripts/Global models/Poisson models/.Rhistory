## Delete burnin
update(modelRegress, n.iter=30000) # this is the burn-in period
## tell JAGS to generate MCMC samples that we will use
## to represent the posterior distribution
variable.names <- c("beta", "Ypred", "p_param", "r_param", "lambda","theta")
# their values recorded
n.iter=300000
thin=30
outputRegress = coda.samples(model=modelRegress, variable.names=variable.names,
n.iter=n.iter, thin=thin)
## Save the model
save(outputRegress,file= 'NegBin_var_output.Rdata')
##---------------------------------------------##
#### Output analyisis
library(coda)       # per leggere catena mcmc
library(plotrix)    # per fare plot CIs
## Load trajectories
## the OUTPUT is mcmc.list object - coda-formatted object;
## it needs to be converted into a matrix, in order to be "readable".
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
summary(data.out)
head(data.out)
## Validation of the stationarity
stationarity.plot<-function(x,...){
S<-length(x)
scan<-1:S
ng<-min( round(S/100),10)
group<-S*ceiling( ng*scan/S) /ng
boxplot(x~group,...)
}
beta = as.data.frame(data.out[,grepl("beta", names(data.out))])
x11()
par(mfrow=c(1,dim(beta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(beta)[2])
{
stationarity.plot(beta[,jj],xlab="iteration",ylab=paste(expression(beta),jj))
}
theta = as.data.frame(data.out[,grepl("theta", names(data.out))])
x11()
par(mfrow=c(1,dim(theta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(theta)[2])
{
stationarity.plot(theta[,jj],xlab="iteration",ylab=paste(expression(theta),jj))
}
theta = as.data.frame(data.out[,grepl("theta", names(data.out))])
x11()
par(mfrow=c(1,dim(theta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(theta)[2])
{
stationarity.plot(theta[,jj],xlab="iteration",ylab=paste(expression(theta),jj))
}
## Define the data
dat = list(Y=Y, X=X, G=G, n=42, mu.beta=rep(0,3), tau.beta=diag(rep(0.001,3)))
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=rep(0,3), theta=rep(0,2), r_param=c(30,3))}
## Delete burnin
update(modelRegress, n.iter=70000) # this is the burn-in period
## tell JAGS to generate MCMC samples that we will use
## to represent the posterior distribution
variable.names <- c("beta", "Ypred", "p_param", "r_param", "lambda","theta")
# their values recorded
n.iter=300000
thin=30
## Delete burnin
update(modelRegress, n.iter=100000) # this is the burn-in period
## tell JAGS to generate MCMC samples that we will use
## to represent the posterior distribution
variable.names <- c("beta", "Ypred", "p_param", "r_param", "lambda","theta")
# their values recorded
n.iter=300000
thin=30
outputRegress = coda.samples(model=modelRegress, variable.names=variable.names,
n.iter=n.iter, thin=thin)
## Save the model
save(outputRegress,file= 'NegBin_var_output.Rdata')
## Load trajectories
## the OUTPUT is mcmc.list object - coda-formatted object;
## it needs to be converted into a matrix, in order to be "readable".
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
## Validation of the stationarity
stationarity.plot<-function(x,...){
S<-length(x)
scan<-1:S
ng<-min( round(S/100),10)
group<-S*ceiling( ng*scan/S) /ng
boxplot(x~group,...)
}
beta = as.data.frame(data.out[,grepl("beta", names(data.out))])
x11()
par(mfrow=c(1,dim(beta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(beta)[2])
{
stationarity.plot(beta[,jj],xlab="iteration",ylab=paste(expression(beta),jj))
}
## Define the data
dat = list(Y=Y, X=X, G=G, n=42, mu.beta=rep(0,3), tau.beta=diag(rep(0.001,3)))
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=rep(0,3), theta=rep(0,2), r_param=c(30,3))}
## Define model
modelRegress=jags.model("NegBin_var.bug", data=dat, inits=inits,
n.adapt=1000000, n.chains=3)
## Save model
save(modelRegress,file="NegBin_var_model.Rdata")
## Delete burnin
update(modelRegress, n.iter=100000) # this is the burn-in period
## tell JAGS to generate MCMC samples that we will use
## to represent the posterior distribution
variable.names <- c("beta", "Ypred", "p_param", "r_param", "lambda","theta")
# their values recorded
n.iter=300000
thin=30
outputRegress = coda.samples(model=modelRegress, variable.names=variable.names,
n.iter=n.iter, thin=thin)
## Save the model
save(outputRegress,file= 'NegBin_var_output.Rdata')
## Load trajectories
## the OUTPUT is mcmc.list object - coda-formatted object;
## it needs to be converted into a matrix, in order to be "readable".
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
## Validation of the stationarity
stationarity.plot<-function(x,...){
S<-length(x)
scan<-1:S
ng<-min( round(S/100),10)
group<-S*ceiling( ng*scan/S) /ng
boxplot(x~group,...)
}
beta = as.data.frame(data.out[,grepl("beta", names(data.out))])
x11()
par(mfrow=c(1,dim(beta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(beta)[2])
{
stationarity.plot(beta[,jj],xlab="iteration",ylab=paste(expression(beta),jj))
}
theta = as.data.frame(data.out[,grepl("theta", names(data.out))])
x11()
par(mfrow=c(1,dim(theta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(theta)[2])
{
stationarity.plot(theta[,jj],xlab="iteration",ylab=paste(expression(theta),jj))
}
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=c(15,0,0), theta=rep(-5,-10), r_param=c(30,3))}
## Define model
modelRegress=jags.model("NegBin_var.bug", data=dat, inits=inits,
n.adapt=1000000, n.chains=3)
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=c(15,0,0), theta=c(-5,-10), r_param=c(30,3))}
## Define model
modelRegress=jags.model("NegBin_var.bug", data=dat, inits=inits,
n.adapt=1000000, n.chains=3)
## Save model
save(modelRegress,file="NegBin_var_model.Rdata")
## Delete burnin
update(modelRegress, n.iter=100000) # this is the burn-in period
## tell JAGS to generate MCMC samples that we will use
## to represent the posterior distribution
variable.names <- c("beta", "Ypred", "p_param", "r_param", "lambda","theta")
# their values recorded
n.iter=300000
thin=30
outputRegress = coda.samples(model=modelRegress, variable.names=variable.names,
n.iter=n.iter, thin=thin)
## Save the model
save(outputRegress,file= 'NegBin_var_output.Rdata')
## Load trajectories
## the OUTPUT is mcmc.list object - coda-formatted object;
## it needs to be converted into a matrix, in order to be "readable".
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
## Validation of the stationarity
stationarity.plot<-function(x,...){
S<-length(x)
scan<-1:S
ng<-min( round(S/100),10)
group<-S*ceiling( ng*scan/S) /ng
boxplot(x~group,...)
}
beta = as.data.frame(data.out[,grepl("beta", names(data.out))])
x11()
par(mfrow=c(1,dim(beta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(beta)[2])
{
stationarity.plot(beta[,jj],xlab="iteration",ylab=paste(expression(beta),jj))
}
theta = as.data.frame(data.out[,grepl("theta", names(data.out))])
x11()
par(mfrow=c(1,dim(theta)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(theta)[2])
{
stationarity.plot(theta[,jj],xlab="iteration",ylab=paste(expression(theta),jj))
}
r_param = as.data.frame(data.out[,grepl("r_param", names(data.out))])
x11()
par(mfrow=c(1,dim(r_param)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(r_param)[2])
{
stationarity.plot(r_param[,jj],xlab="iteration",ylab=paste(expression(r),jj))
}
#### 3 - some plot of the posterior distributions of y(t)s (for t = 1, 2 for example)
pred_y <- as.data.frame(data.out[,grepl("Ypred", names(data.out))])
pred_int <- apply(pred_y,2,quantile,c(.05,.95))
pred_mean <- apply(pred_y,2,mean)
pred_sd <- apply(pred_y,2,sd)
## Plot of distribution of Y with posterior parameters, comparison with real Y - 90% credibility interval
sz = dim(data.out)[1]
x11()
plot(1:42, pred_mean, pch = 16, ylim=c(0,30000), col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:42, Y, pch=15)
for(ii in 1:42)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=42)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
x11()
plot(1:42, pred_mean, pch = 16, ylim=c(0,15000), col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:42, Y, pch=15)
for(ii in 1:42)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=42)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
## Plot of distribution of Y with posterior parameters, comparison with real Y - 90% credibility interval
sz = dim(data.out)[1]
x11()
plot(1:42, pred_mean, pch = 16, ylim=c(0,20000), col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:42, Y, pch=15)
for(ii in 1:42)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=42)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Global models/BSTS Model")
#################################################
#####        residual BSTS models           #####
#################################################
## Prerequisites
rm(list=ls())
library(rjags)
library(dplyr)
library(bsts)
library(loo)
load("../../../Dataset/bikemi_data.RData")
data <- bike_nil_week_hour
weather_data <- read.table("../../../Dataset/data_weather.csv", header = T, sep = ",")
total_traffic <- data %>% group_by(NewDay) %>% summarize(n())
names(total_traffic) <- c("Day","N_travels")
w = read.csv('weat.csv')[,1]
volume <- as.data.frame(cbind(total_traffic[,2], weather_data$rain, weather_data$Tmean))
colnames(volume) <- c("Y","Rt","T")
head(volume)
## Define filters
mean_filter <- function(total_traffic, q, d)
## Define filters
mean_filter <- function(total_traffic, q, d)
{
tot_days <- dim(total_traffic)[1]
mean_comp = rep(0, tot_days)
for(i in 1:tot_days)
{
mean_comp[i] = sum(total_traffic[max(1,i-q):min(tot_days,i+q),2])/d
}
return(mean_comp)
}
seasonal_filter <- function(total_traffic, q, d, m)
{
tot_days <- dim(total_traffic)[1]
w = rep(0, d)
for(k in 1:d)
{
w[k] = sum(total_traffic[which(as.logical(((total_traffic[,1]%%d)==k)*(k!=d)+((total_traffic[,1]%%d)==0)*(k==d))), 2])/(tot_days/d)
}
s = w - sum(w)/d
periodic_comp = rep(0, tot_days)
for (i in 1:tot_days)
{
periodic_comp[i] = s[(i%%d)*((i%%d)!=0)+d*((i%%d)==0)]
}
return(periodic_comp)
}
d = 7 # period is a week
q = 3
m = mean_filter(total_traffic, q, d)
s = seasonal_filter(total_traffic, q, d, m)
## Set initial conditons
mean_mu = mean(m)
mean_gamma = s[c(3:7,1)]
## Define the data
lag  =5
dat = list(Y=volume$Y,  Rt=w, Wd = rep(c(rep(0,5),rep(1,2)),6),
T=volume$T, n=42, lag=lag,
mean_mu=mean_mu, mean_gamma=mean_gamma)
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=rep(0,2))}
## Compute model
modelRegress=jags.model("r_BSTS.bug",data=dat,inits=inits,
n.adapt=10000,n.chains=2)
w = read.csv('weat.csv')[,1]
#################################################
#####         complete r-BSTS model         #####
#################################################
volume <- as.data.frame(cbind(total_traffic[,2], weather_data$rain, weather_data$Tmean))
colnames(volume) <- c("Y","Rt","T")
head(volume)
## Define filters
mean_filter <- function(total_traffic, q, d)
{
tot_days <- dim(total_traffic)[1]
mean_comp = rep(0, tot_days)
for(i in 1:tot_days)
{
mean_comp[i] = sum(total_traffic[max(1,i-q):min(tot_days,i+q),2])/d
}
return(mean_comp)
}
seasonal_filter <- function(total_traffic, q, d, m)
{
tot_days <- dim(total_traffic)[1]
w = rep(0, d)
for(k in 1:d)
{
w[k] = sum(total_traffic[which(as.logical(((total_traffic[,1]%%d)==k)*(k!=d)+((total_traffic[,1]%%d)==0)*(k==d))), 2])/(tot_days/d)
}
s = w - sum(w)/d
periodic_comp = rep(0, tot_days)
for (i in 1:tot_days)
{
periodic_comp[i] = s[(i%%d)*((i%%d)!=0)+d*((i%%d)==0)]
}
return(periodic_comp)
}
d = 7 # period is a week
q = 3
m = mean_filter(total_traffic, q, d)
s = seasonal_filter(total_traffic, q, d, m)
## Set initial conditons
mean_mu = mean(m)
mean_gamma = s[c(3:7,1)]
## Define the data
lag  =5
dat = list(Y=volume$Y,  Rt=w, Wd = rep(c(rep(0,5),rep(1,2)),6),
T=volume$T, n=42, lag=lag,
mean_mu=mean_mu, mean_gamma=mean_gamma)
## A list of initial value for the MCMC algorithm in JAGS
inits = function() {list(beta=rep(0,2))}
## Compute model
modelRegress=jags.model("r_BSTS.bug",data=dat,inits=inits,
n.adapt=10000,n.chains=2)
## Update burn-in
update(modelRegress,n.iter=20000) # this is the burn-in period
## MCMC samples to represent the posterior distribution
variable.names <- c("beta",  "tau", "mu", "gamma", "delta", 'nu',"Ypred","meanlik")
# their values recorded
n.iter=500000
thin=20
outputRegress=coda.samples(model=modelRegress,
variable.names=variable.names,n.iter=n.iter,thin=thin)
## Load trajectories as matrices
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
summary(data.out)
head(data.out)
## Validation of the stationarity
stationarity.plot<-function(x,...){
S<-length(x)
scan<-1:S
ng<-min( round(S/100),10)
group<-S*ceiling( ng*scan/S) /ng
boxplot(x~group,...)
}
beta.data = as.data.frame(data.out[,grepl("beta", names(data.out))])
x11()
par(mfrow=c(1,dim(beta.data)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(beta.data)[2])
{
stationarity.plot(beta.data[,jj],xlab="iteration",ylab=paste(expression(beta),jj))
}
nu.data = as.data.frame(data.out[,grepl("nu", names(data.out))])
x11()
par(mfrow=c(1,dim(nu.data)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(nu.data)[2])
{
stationarity.plot(nu.data[,jj],xlab="iteration",ylab=paste(expression(nu),jj))
}
tau.data = as.data.frame(data.out[,grepl("tau", names(data.out))])
x11()
par(mfrow=c(1,dim(tau.data)[2]),mar=c(2.75,2.75,.5,.5),mgp=c(1.7,.7,0))
for (jj in 1:dim(tau.data)[2])
{
stationarity.plot(tau.data[,jj],xlab="iteration",ylab=paste(expression(tau),jj))
}
mu.data = as.data.frame(data.out[,grepl("mu", names(data.out))])
mu.data = mu.data[,1:(dim(mu.data)[2]-1)]
delta.data = as.data.frame(data.out[,grepl("delta", names(data.out))])
delta.data = delta.data[,1:(dim(delta.data)[2]-1)]
gamma.data = as.data.frame(data.out[,grepl("gamma", names(data.out))])
gamma.data = gamma.data[,(1+lag):(dim(gamma.data)[2]-1)]
meanlik.data = as.data.frame(data.out[,grepl("meanlik", names(data.out))])
pred_y <- as.data.frame(data.out[,grepl("Ypred", names(data.out))]) # samples of the posterior for t = 1: 42
pred_int <- apply(pred_y,2,quantile,c(.05,.95))
pred_mean <- apply(pred_y,2,mean)
pred_sd <- apply(pred_y,2,sd)
x11()
par(mfrow=c(1,dim(beta.data)[2]))
for(i in 1:dim(beta.data)[2]){
acf(beta.data[,i],lwd=3,col="red3", main=paste(expression(beta),i))
}
for (j in 1:6){
x11()
par(mfrow=c(1,7))
for(i in 7*(j-1)+1:7*j){
acf(nu.data[,i],lwd=3,col="red3", main=paste(expression(nu),i))
}
}
for (j in 1:6){
x11()
par(mfrow=c(1,7))
for(i in (7*(j-1)+1):(7*j)){
acf(nu.data[,i],lwd=3,col="red3", main=paste(expression(nu),i))
}
}
dim(nu)
dim(nu.data)
nu.data = as.data.frame(data.out[,grepl("nu", names(data.out))])
x11()
par(mfrow=c(1,dim(nu.data)[2]))
for(i in 1:dim(nu.data)[2]){
acf(nu.data[,i],lwd=3,col="red3", main=paste(expression(nu),i))
}
x11()
par(mfrow=c(1,dim(tau.data)[2]))
for(i in 1:dim(tau.data)[2]){
acf(tau.data[,i],lwd=3,col="red3", main=paste(expression(tau),i))
}
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Global models/Poisson models")
############################################################
####### Poisson with Yyest_equal and Yyest_diff  ########
############################################################
rm(list=ls())
library(coda)
library(plotrix)
library(loo)
library(dplyr)
library(rjags)
# load dataset and weather, for computing the design matrix X
load("../../../Dataset/bikemi_data.RData")
data <- bike_nil_week_hour
weather_data <- read.table("../../../Dataset/data_weather.csv", header = T, sep = ",")
total_traffic <- data %>% group_by(NewDay) %>% summarize(n())
names(total_traffic) <- c("Day","N_travels")
### -> remove Yan
#############################################
######### Without Yan #######################
#############################################
Yyest <- embed(as.matrix(total_traffic)[,2],dimension = 2)[,2]
m1 <- c(0,1,1,1,1,0,1)
m1 <- diag(rep(m1,6))
Yyest_eq <- as.vector(m1%*%Yyest)
m1
m1 <- c(0,1,1,1,1,0,1)
m1 <- diag(c(1,1,1,1,0,1),rep(m1,5))
m1 <- c(0,1,1,1,1,0,1)
m1 <- diag(c(c(1,1,1,1,0,1),rep(m1,5)))
m1
Yyest_eq <- as.vector(m1%*%Yyest)
Yyest_diff <- Yyest - Yyest_eq
Y <- as.matrix(total_traffic)[2:42,2]
c(c(rep(0,4),rep(1,2)),rep(c(rep(0,5), rep(1,2)),5))
volume <- as.data.frame(cbind(Y,Yyest_eq,Yyest_diff,
c(c(rep(0,4),rep(1,2)),rep(c(rep(0,5), rep(1,2)),5)),
embed(weather_data$rain,dimension=2)[1:41,],
weather_data$Tmean[2:42]))
colnames(volume) <- c("Y","Yyest_eq","Yyest_diff","W","Rt","Ryest","T")
## Normalize old traffic for intepretatio of regression coefficients
volume[,2] <- volume[,2]/1000
volume[,3] <- volume[,3] /1000
