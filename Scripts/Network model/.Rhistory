}
}
future = c(43:49)
future_delta = matrix(0,n,8)
future_delta[,1] = data.out[1:n,46]
future_mu = matrix(0,n,8)
future_mu[,1] = data.out[1:n, 137]
future_gamma = matrix(0,n,13)
for(kk in 1:6)
{
future_gamma[, kk] = data.out[1:n,88+kk]
}
future_rho = matrix(0,n,8)
future_rho[,1] = data.out[1:n,180]
future_y = matrix(0,n,7)
datas = cbind(rbind(1,0,1,1,1,0,1), c(7,10,8,9,7,11,10))
for(ii in 1:n)
{
for(jj in 1:7)
{
future_delta[ii, jj+1] = future_delta[ii, jj] + rnorm(n=1, mean=0, sd = 1/sqrt(data.out[ii, 183]))
future_mu[ii, jj+1] = future_delta[ii,jj] + future_mu[ii,jj] + rnorm(n=1, mean=0, sd = 1/sqrt(data.out[ii, 182]))
future_rho[ii,jj+1] = future_rho[ii,jj]*data.out[ii,1] + rnorm(n=1, mean= 0, sd = 1/sqrt(data.out[ii,185]))
future_gamma[ii,jj+6] = -sum(future_gamma[ii,jj:(jj+5)]) + rnorm(n=1, mean=0, sd = 1/sqrt(data.out[ii,183]))
future_y[ii,jj] = data.out[ii,2] * datas[jj,1] + data.out[ii,3]*datas[jj,2] + future_mu[ii,jj+1] + future_rho[ii,jj+1]+future_gamma[ii,jj+6]+ rnorm(n=1, mean=0, sd = 1/sqrt(data.out[ii,181]))
}
}
x11()
plot(1:49, c(pred,colMeans(future_y)), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:42, volume$Y, pch=15)
for(ii in 1:42)
{
points(ii, quantile(with_noise[1:n,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(with_noise[1:n,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(with_noise[1:n,ii] , 0.05), ii, quantile(with_noise[1:n,ii], 0.95), col  = 'darkred')
if(ii!=42)
{
lines(c(ii, ii+1), c(quantile(with_noise[1:n,ii] , 0.05), quantile(with_noise[1:n,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(with_noise[1:n,ii] , 0.95), quantile(with_noise[1:n,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
colMeans(pred_y)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=15)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
##### load Poisson_wYan_output -> Spike&Slab now is done, we have used it to remove Yan
load("Poisson Model/Poisson_wYan_output.Rdata")
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Global models")
##### load Poisson_wYan_output -> Spike&Slab now is done, we have used it to remove Yan
load("Poisson Model/Poisson_wYan_output.Rdata")
#################################################
#####         POISSON model Spike&Slab     #####
#################################################
volume <- as.data.frame(cbind(embed(as.matrix(total_traffic)[,2],dimension = 8)[,c(1,2,8)],
rep(c(rep(0,5),
rep(1,2)),5),
embed(weather_data$rain,dimension=2)[7:41,],
weather_data$Tmean[8:42],
rep(c(rep(0,5),1,0),5),
rep(c(1,rep(0,6)),5)))
colnames(volume) <- c("Y","Yyest","Yan","W","Rt","Ryest","T","S","M")
## Normalize old traffic for intepretatio of regression coefficients
volume[,2] <- volume[,2]/1000
volume[,3] <- volume[,3] /1000
## Load trajectories as matrices
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
#### 3 - some plot of the posterior distributions of y(t)s (for t = 1, 2 for example)
volume$Y # given obesrvations for t = 1: 42
pred_y <- data.out[,1:35] # samples of the posterior for t = 1: 42
pred_int <- apply(pred_y,2,quantile,c(.05,.95))
pred_mean <- apply(pred_y,2,mean)
pred_sd <- apply(pred_y,2,sd)
####### 3 - PREDICTIVE GOODNESS-OF-FIT
N_obs <- length(volume$Y)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=15)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=15)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
points(1:35, volume$Y, pch=14)
points(1:35, volume$Y, pch=16)
points(1:35, volume$Y, pch=20)
points(1:35, volume$Y, pch=20)
points(1:35, volume$Y, pch=18)
points(1:35, volume$Y, pch=17)
points(1:35, volume$Y, pch=15)
points(1:35, volume$Y, pch=16)
points(1:35, volume$Y, pch=19)
points(1:35, volume$Y, pch=19)
points(1:35, volume$Y, pch=17)
points(1:35, volume$Y, pch=18)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=18)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=16)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=15)
points(1:35, volume$Y, pch=16)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=16)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=17)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=18
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=18)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=20)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=20)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='comparison between actual and predicted Y')
points(1:35, volume$Y, pch=20)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Network model")
rm(list=ls())
library(dplyr)
load("../../Scripts/Dataset/bikemi_data_torti.RData")
load("../../Dataset/bikemi_data_torti.RData")
getwd()
load("../../Dataset/bikemi_data_torti.RData")
# load dataset and weather, for computing the design matrix X
load("../../Dataset/bikemi_data.RData")
rm(list=ls())
library(dplyr)
load("../../Dataset/bikemi_data.RData")
dat1<-read.table(file = "../../Dataset/hour.csv", sep = ",", header = T)
dat1
tail(dat1)
dat1[,dim(dat1)[1]-30:dim(dat1)]
dat1[,dim(dat1)[1]-30:dim(dat1)[1]]
dat1[,dim(dat1)[1]-30:dim(dat1)[1]]
dat1[,dim(dat1)[1]-30:dim(dat1)[1]]
dim(dat1)
dim(dat1)[1]
dat1[,(dim(dat1)[1])-30:(dim(dat1)[1])]
dat1[,(dim(dat1)[1])-30:(dim(dat1)[1])]
dat1[,(dim(dat1)[1])-30:(dim(dat1)[1])-1]
dat1[,350073:dim(dat1)[1]]
dat1[350073:dim(dat1)[1],]
dat1[350053:dim(dat1)[1],]
data <- cbind(bike_nil_week_hour, dat1)
rm(bike_nil_week_hour, dat1)
m <- 100  #number of intervals everyday
h <- 240000/m
t <- seq(0, 240000, by = h)
plot_flux <- function(station, day){
sub <- data[which(data$NewDay == day), c(10,12, 24, 25)]
sub_in <- sub[which(sub$NumeroStzFine==station), 4]
sub_out <- sub[which(sub$NumeroStzInizio==station), 3]
n_in <- rep(0, m+1)
n_out <- rep(0, m+1)
for(i in 2:(m+1)){
n_in[i] <- as.numeric(length(which(sub_in < t[i])))
n_out[i] <- as.numeric(length(which(sub_out < t[i])))
}
return(n_in - n_out)
}
plot_flux(2,3)
head(data[,c(10,12)])
60*24
60*60*24
plot(1:m,plot_flux(2,3))
plot(1:m+1,plot_flux(2,3))
plot(1:m-1,plot_flux(2,3))
plot(1:m+1,plot_flux(2,3))
plot(1:m,plot_flux(2,3))
1:m
1:m+1
plot(1:(m+1),plot_flux(2,3))
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout")
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow")
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19)
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=1)
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6)
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
lines(1:(m+1),plot_flux(2,3),col="darkred")
axis(at=1)
axis(side=1,at=1)
axis(side=1,at=seq(0,100,by=2))
axis(side=1,at=seq(0,100,by=2),labels=seq(0,100,by=10))
axis(side=1,at=seq(0,100,by=2))
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2))
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2),tck=1)
plot(1:(m+1),plot_flux(2,3), xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2),tck=0)
plot(1:(m+1),plot_flux(2,3), xaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2))
plot(1:(m+1),plot_flux(2,3), las=1,xaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2))
plot(1:(m+1),plot_flux(2,3), las=1,xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2))
axis(side=2,at=seq(-40,40,by=4))
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=2))
axis(side=2,at=seq(-40,40,by=4),las=1)
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=5),las=1)
lines(1:(m+1),plot_flux(2,3),col="darkred")
plot_flux(2,3)
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", main="Net time-interval flow", pch=19, cex=0.6,
col="darkred",subtitle="100 intervals in a day")
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout", title="Net time-interval flow", pch=19, cex=0.6,
col="darkred",subtitle="100 intervals in a day")
axis(side=1,at=seq(0,100,by=4))
plot(1:(m+1),plot_flux(2,3),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,3),col="darkred")
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Global models")
##### load Poisson_wYan_output -> Spike&Slab now is done, we have used it to remove Yan
load("Poisson Model/Poisson_wYan_output.Rdata")
## Load trajectories as matrices
data.out=as.matrix(outputRegress) # trasform the mcmc.list into a matrix,
data.out=data.frame(data.out)     # or, better, into a dataframe (easiest to handle in R)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain # this is the final sample size
#################################################
#####         POISSON model Spike&Slab     #####
#################################################
volume <- as.data.frame(cbind(embed(as.matrix(total_traffic)[,2],dimension = 8)[,c(1,2,8)],
rep(c(rep(0,5),
rep(1,2)),5),
embed(weather_data$rain,dimension=2)[7:41,],
weather_data$Tmean[8:42],
rep(c(rep(0,5),1,0),5),
rep(c(1,rep(0,6)),5)))
# load dataset and weather, for computing the design matrix X
load("../../Dataset/bikemi_data.RData")
data <- bike_nil_week_hour
weather_data <- read.table("../../Dataset/data_weather.csv", header = T, sep = ",")
total_traffic <- data %>% group_by(NewDay) %>% summarize(n())
names(total_traffic) <- c("Day","N_travels")
#### 3 - some plot of the posterior distributions of y(t)s (for t = 1, 2 for example)
volume$Y # given obesrvations for t = 1: 42
#################################################
#####         POISSON model Spike&Slab     #####
#################################################
volume <- as.data.frame(cbind(embed(as.matrix(total_traffic)[,2],dimension = 8)[,c(1,2,8)],
rep(c(rep(0,5),
rep(1,2)),5),
embed(weather_data$rain,dimension=2)[7:41,],
weather_data$Tmean[8:42],
rep(c(rep(0,5),1,0),5),
rep(c(1,rep(0,6)),5)))
colnames(volume) <- c("Y","Yyest","Yan","W","Rt","Ryest","T","S","M")
## Normalize old traffic for intepretatio of regression coefficients
volume[,2] <- volume[,2]/1000
volume[,3] <- volume[,3] /1000
#### 3 - some plot of the posterior distributions of y(t)s (for t = 1, 2 for example)
volume$Y # given obesrvations for t = 1: 42
pred_y <- data.out[,1:35] # samples of the posterior for t = 1: 42
pred_int <- apply(pred_y,2,quantile,c(.05,.95))
pred_mean <- apply(pred_y,2,mean)
pred_sd <- apply(pred_y,2,sd)
####### 3 - PREDICTIVE GOODNESS-OF-FIT
N_obs <- length(volume$Y)
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'day', ylab='traffic', main ='predicted distribution of Y')
points(1:35, volume$Y, pch=20)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
x11()
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'DAY', ylab='TRAFFIC', main ='predicted distribution of Y')
points(1:35, volume$Y, pch=20)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
plot(1:35, colMeans(pred_y), pch = 16, col = 'red', type ='o', xlab = 'DAY', ylab='TRAFFIC', main ='predicted distribution of Y')
points(1:35, volume$Y, pch=20)
for(ii in 1:35)
{
points(ii, quantile(pred_y[,ii], 0.05), col = 'darkred', pch = 16)
points(ii, quantile(pred_y[,ii], 0.95), col = 'darkred', pch = 16)
segments(ii, quantile(pred_y[,ii] , 0.05), ii, quantile(pred_y[,ii], 0.95), col  = 'darkred')
if(ii!=35)
{
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.05), quantile(pred_y[,ii+1], 0.05)), col = 'darkred', lty = 3)
lines(c(ii, ii+1), c(quantile(pred_y[,ii] , 0.95), quantile(pred_y[,ii+1], 0.95)), col = 'darkred', lty = 3)
}
}
plot_flux(2,1:7)
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred")
setwd("~/Documents/V anno/Bayesian/BayesProject/Bayesian_project/Scripts/Network model")
rm(list=ls())
library(dplyr)
load("../../Dataset/bikemi_data.RData")
dat1<-read.table(file = "../../Dataset/hour.csv", sep = ",", header = T)
data <- cbind(bike_nil_week_hour, dat1)
rm(bike_nil_week_hour, dat1)
m <- 100  #number of intervals everyday
h <- 240000/m
t <- seq(0, 240000, by = h)
plot_flux <- function(station, day){
sub <- data[which(data$NewDay == day), c(10,12, 24, 25)]
sub_in <- sub[which(sub$NumeroStzFine==station), 4]
sub_out <- sub[which(sub$NumeroStzInizio==station), 3]
n_in <- rep(0, m+1)
n_out <- rep(0, m+1)
for(i in 2:(m+1)){
n_in[i] <- as.numeric(length(which(sub_in < t[i])))
n_out[i] <- as.numeric(length(which(sub_out < t[i])))
}
return(n_in - n_out)
}
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,3),col="darkred")
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred")
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
for (ii in 6:7){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="blue")
lines(1:(m+1),plot_flux(2,ii),col="blue")
}
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred", ylim=c(-50,50))
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred", ylim=c(-50,70))
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
for (ii in 6:7){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="blue")
lines(1:(m+1),plot_flux(2,ii),col="blue")
}
abline(h=0,lty="dashed")
abline(h=0,lty="dashed",col=fade("black",0.5))
library(grDevices)
abline(h=0,lty="dashed",col=fade("black",0.5))
library(graphs)
abline(h=0,lty="dashed",col="grey")
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred", ylim=c(-50,70))
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
for (ii in 6:7){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="blue")
lines(1:(m+1),plot_flux(2,ii),col="blue")
}
abline(h=0,lty="dashed",col="grey")
help("legend")
legend("topright",legend=c("weekday","weekend"),lwd=c(2,2), col=c("darkred","blue"),lty=c(1,1))
legend("topright",legend=c("weekday","weekend"),lwd=c(1,1), col=c("darkred","blue"),lty=c(1,1))
legend("topright",legend=c("weekday","weekend"),lwd=c(2,2), col=c("darkred","blue"),lty=c(1,1),cex=0.5)
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred", ylim=c(-50,70))
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
for (ii in 6:7){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="blue")
lines(1:(m+1),plot_flux(2,ii),col="blue")
}
abline(h=0,lty="dashed",col="grey")
legend("topright",legend=c("weekday","weekend"),lwd=c(2,2), col=c("darkred","blue"),lty=c(1,1),cex=0.6)
legend("topright",legend=c("weekday","weekend"),lwd=c(2,2), col=c("darkred","blue"),lty=c(1,1),cex=0.7)
plot(1:(m+1),plot_flux(2,1),xaxt='n',yaxt='n',xlab="time", ylab="Nin-Nout",
title(main="Net time-interval flow", sub="100 intervals in a day"), pch=19, cex=0.6,
col="darkred", ylim=c(-50,70))
axis(side=1,at=seq(0,100,by=4))
axis(side=2,at=seq(-100,100,by=10),las=1)
lines(1:(m+1),plot_flux(2,1),col="darkred")
for (ii in 2:5){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="darkred")
lines(1:(m+1),plot_flux(2,ii),col="darkred")
}
for (ii in 6:7){
points(1:(m+1),plot_flux(2,ii),pch=19,cex=0.6,col="blue")
lines(1:(m+1),plot_flux(2,ii),col="blue")
}
abline(h=0,lty="dashed",col="grey")
legend("topright",legend=c("weekday","weekend"),lwd=c(2,2), col=c("darkred","blue"),lty=c(1,1),cex=0.7)
